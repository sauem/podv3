<?php


namespace backend\controllers;


use backend\models\CategoriesModel;
use backend\models\ContactsModel;
use backend\models\OrdersModel;
use backend\models\ProductsModel;
use common\helper\Helper;
use yii\helpers\ArrayHelper;
use yii\web\Response;

class AjaxController extends BaseController
{
    public function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    function actionLoadProductSelect()
    {
        $ids = \Yii::$app->request->post('keys');
        $contacts = ContactsModel::find()
            ->with('page')
            ->where(['IN', 'contacts.id', $ids])->asArray()->all();

        $total = array_sum(ArrayHelper::getColumn($contacts, 'page.product.regular_price'));
        $product = ArrayHelper::getColumn($contacts, 'page.product');
        $selected = ArrayHelper::getColumn($contacts, 'option');
        foreach ($product as $k => $p) {
            $product[$k]['option'] = Helper::option($p['option']);
            $product[$k]['selected'] = $selected[$k];
        }
        $customer = $contacts[0];
        return [
            'customer' => $customer,
            'product' => $product,
            'total' => $total
        ];
    }

    function actionLoadSku()
    {
        $keys = \Yii::$app->request->post('keys');
        $sku = ProductsModel::findAll(['category_id' => $keys]);
        return $sku;
    }

    function actionLoadProduct()
    {
        $sku = \Yii::$app->request->post('sku');

        $product = ProductsModel::find()
            ->where(['sku' => $sku])
            ->with('category')
            ->asArray()->one();
        $product['option'] = Helper::option($product['option']);
        return [
            'product' => $product,
            'customer' => [
                'option' => null
            ]
        ];
    }

    function actionUpdateTotal()
    {
        $sku = \Yii::$app->request->post('sku');
        $qty = \Yii::$app->request->post('qty');
        $qty = $qty ? $qty : 1;
        $p = ProductsModel::findOne(['sku' => $sku]);
        $subTotal = $p->regular_price * $qty;
        $saleTotal = $p->sale_price * $qty;
        $total = $subTotal - $saleTotal;
        return [
            'subTotal' => $subTotal,
            'saleTotal' => $saleTotal,
            'total' => $total,
            'qty' => $qty
        ];

    }

    function actionRevenue()
    {
        $kind = \Yii::$app->request->post('kind');
        $time = \Yii::$app->request->post('time');

        $kind = "sale";
        $time = "week";

        $query = OrdersModel::find()->with(['user' => function ($query) {
            $query->select(['user.username', 'user.id']);
        }])->orderBy(['created_at' => SORT_ASC])->groupBy('user_id');

        $result = static::weeklyReport($query);

        $data['label'] = static::labelOfWeek();
        $items = [];

        foreach ($result as $k => $item) {
            $items[$item['user_id']][$k] = static::renderItem($item);
        }
    }

    static function renderItem($item)
    {
        foreach ($item as $k => $val) {
            $data['label'] = $val['name'];
            $data['data'] = $val['total'];
            $data['backgroundColor'] = '';
        }

    }

    static function weeklyReport($query)
    {
        $beginOfDay = strtotime('-7 days');
        $endOfDay = time();
        $query->andFilterWhere([
            'between', 'created_at', $beginOfDay, $endOfDay
        ])
            ->select(['SUM(total) AS `total`'
                , 'DAY(FROM_UNIXTIME(created_at)) as day'
                , 'MONTH(FROM_UNIXTIME(created_at)) as month',
                'user_id'
            ])
            ->groupBy(['day', 'month', 'user_id']);

        return $query->asArray()->all();
    }

    static function labelOfWeek()
    {
        $startWeek = strtotime('this week', time());
        for ($i = 1; $i <= 7; $i++) {
            $label[$i] = date("d/m/Y", strtotime("+$i day", $startWeek));
        }
        return $label;
    }


    public function actionReportSearch()
    {
        $sort = \Yii::$app->request->post();
        $accounts = ArrayHelper::getColumn($sort,'account');
        $status = ArrayHelper::getColumn($sort,'status');
        $type = ArrayHelper::getColumn($sort,'type');
        $time = ArrayHelper::getColumn($sort,"time");

        $time['start']  = strtotime($time['start']);
        $time['end']  = strtotime($time['end']);

        return $time;
    }
}