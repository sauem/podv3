<?php


namespace backend\controllers;


use backend\models\OrdersContacts;
use backend\models\OrdersItems;
use backend\models\OrdersModel;
use common\helper\Helper;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Response;

class ReportController extends Controller
{
    public function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    function actionSale()
    {
        $sortBy = \Yii::$app->request->post('sort');
        $query = OrdersModel::find()->with(['user' => function ($query) {
            $query->select(['user.username', 'user.id']);
        }])->addSelect([
                'sum(total) as total',
                'user_id'])
            ->orderBy(['total' => SORT_DESC])
            ->groupBy('user_id');

        switch ($sortBy) {
            case "last_month":
                $result = static::sortByLastMonth($query);
                break;
            case "this_week":
                $result = static::sortByWeek($query);
                break;
            case "this_month":
                $result = static::sortByThisMonth($query);
                break;
        }
        return $result;
    }

    function actionMarketing()
    {
        $sortBy = \Yii::$app->request->post('sort');

        $query = OrdersContacts::find()->groupBy('order_id')
            ->leftJoin('orders', "orders.id=orders_contacts.order_id")
            ->addSelect(["sum(orders.total) as total", "orders.id"]);


    }

    function actionProduct()
    {
        $sortBy = \Yii::$app->request->post('sort');
        $query = OrdersItems::find()
            ->with(['product' => function ($query) {
                $query->select(['sku', 'name']);
            }])
            ->groupBy('product_sku')
            ->addSelect(['product_sku', 'sum(price*qty) as total'])
            ->orderBy(['total' => SORT_DESC]);
        switch ($sortBy) {
            case "last_month":
                $result = static::sortByLastMonth($query);
                break;
            case "this_month":
                $result = static::sortByThisMonth($query);
                break;
            default:
                $result = static::sortByWeek($query);
                break;
        }
        return $result;
    }

    function sortByWeek($query)
    {
        $beginOfDay = strtotime('this week', time());
        $endOfDay = strtotime('sunday this week', time());
        $query->andFilterWhere([
            'between', 'created_at', $beginOfDay, $endOfDay
        ]);
        return [
            'start' => date('d/m/Y', $beginOfDay),
            'end' => date('d/m/Y', $endOfDay),
            'data' => $query->asArray()->all()
        ];
    }

    function sortByLastMonth($query)
    {
        $beginOfDay = strtotime('first day of last month', time());
        $endOfDay = strtotime('last day of last month', time());
        $query->andFilterWhere([
            'between', 'created_at', $beginOfDay, $endOfDay
        ]);

        return [
            'start' => date('d/m/Y', $beginOfDay),
            'end' => date('d/m/Y', $endOfDay),
            'data' => $query->asArray()->all()
        ];
    }

    function sortByThisMonth($query)
    {
        $beginOfDay = strtotime('first day of this month', time());
        $endOfDay = time();
        $query->andFilterWhere([
            'between', 'created_at', $beginOfDay, $endOfDay
        ]);
        return [
            'start' => date('d/m/Y', $beginOfDay),
            'end' => date('d/m/Y', $endOfDay),
            'data' => $query->asArray()->all()
        ];
    }
}