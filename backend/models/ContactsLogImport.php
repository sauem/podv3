<?php

namespace backend\models;

use common\helper\Helper;
use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "contacts_log_import".
 *
 * @property int $id
 * @property int $phone
 * @property int $code
 * @property string|null $address
 * @property string|null $zipcode
 * @property string|null $category
 * @property string|null $option
 * @property string|null $customer_note
 * @property string $status
 * @property string|null $note
 * @property int $created_at
 * @property int $updated_at
 */
class ContactsLogImport extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'contacts_log_import';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['phone'], 'required', 'message' => '{attribute} không được để trống!'],
            [['address', 'option', 'link', 'short_link', 'code', 'note', 'country', 'type'], 'string'],
            [['register_time'], 'safe'],
            [['zipcode', 'created_at', 'updated_at', 'callback_time'], 'integer'],
            [['name', 'utm_source', 'utm_medium', 'utm_content', 'utm_term', 'utm_campaign', 'host', 'hashkey'], 'string', 'max' => 255],
            [['phone'], 'string', 'max' => 15],
           // [['email'], 'string', 'max' => 100],
            // [['hashkey'], 'unique', 'message' => 'Liên hệ đã tồn tại với lựa chọn option tương ứng!'],
            [['ip', 'status'], 'string', 'max' => 50],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function beforeSave($insert)
    {
        if ($insert) {
            if (!$this->created_at) {
                $this->created_at = time();

                $maxIDNumber = ContactsLogImport::find()->max('id');
                if (!$maxIDNumber) {
                    $maxIDNumber = 0;
                }

                $this->short_link = Helper::getHost($this->link);
                $this->hashkey = md5($this->phone . $this->short_link . $this->option);
                $this->host = Helper::getHost(Yii::$app->request->getHostInfo());
                $this->code = !$this->code ? Helper::makeCodeIncrement($maxIDNumber, $this->country) : $this->code;

                $this->register_time = empty($this->register_time) ? time() : Helper::convertTime($this->register_time);
                $this->country = $this->country ? $this->country : Helper::findCountryFromZipcode($this->zipcode);
                if (self::checkExists($this->hashkey)) {
                    $this->addError("hashkey", "Liên hệ đã tồn tại với lựa chọn option tương ứng!");
                    return false;
                }
                if (self::checkExistCapture($this->phone, $this->short_link)) {
                    $this->addError("type", "Liên hệ đã tồn tại với phân loại capture form!");
                    return false;
                }
                if (!$this->country) {
                    $this->addError("country", "Quốc gia rỗng!");
                    return false;
                }
            }
            $limit = self::find()->where(['code' => $this->code])->count();
            if ($limit >= 5) {
                $this->addError("code", "Liên hệ quá số lần liên lạc!");
                return false;
            }
        }
        $this->updated_at = time();
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    static function checkExists($haskey)
    {
        if (self::findOne(['hashkey' => $haskey])) {
            return true;
        }
        return false;
    }

    static function checkExistCapture($phone, $link)
    {
        $count = self::find()->where(['phone' => $phone, 'short_link' => $link])
            ->andFilterWhere(['LIKE', 'type', self::_CAPTURE])->count();
        if ($count > 0) {
            return true;
        }
        return false;
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'phone' => 'Phone',
            'code' => 'Code',
            'address' => 'Address',
            'zipcode' => 'Zipcode',
            'category' => 'Category',
            'option' => 'Option',
            'customer_note' => 'Customer Note',
            'status' => 'Status',
            'note' => 'Note',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function getContact()
    {
        return $this->hasOne(ContactsModel::className(), ['phone' => 'phone']);
    }

    public function getLog()
    {
        return $this->hasOne(ContactsLog::className(), ['phone' => 'phone', 'contact_code' => 'code']);
    }
}
